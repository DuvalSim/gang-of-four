name: publish

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_URI: ghcr.io/duvalsim/gang-of-four-backend:latest

jobs:
  frontend:
    name: Deploy frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.14

      - name: Install dependencies and build
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          CI=false npm run build

      - name: Install SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} > ~/.ssh/known_hosts

      - run: ls
      - name: Upload frontend to server
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avzr --delete --chown=${{ secrets.DEPLOY_USER }}:www-data --chmod=D750,F640
          path: build/
          remote_path: ${{ secrets.DEPLOY_PATH_FRONTEND }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: Cleanup
        run: rm -rf ~/.ssh

  publish:
    needs: frontend
    name: publish image
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish
        run: |
          cd backend
          docker build . --tag ${{ env.IMAGE_URI }}
          docker push ${{ env.IMAGE_URI }}


  deploy:
    needs: publish
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            docker pull ${{ env.IMAGE_URI }} && \
            docker stop gang-of-four-backend || true && \
            docker rm gang-of-four-backend || true && \
            docker run -d --restart=always --name gang-of-four-backend -p 8000:8000 ${{ env.IMAGE_URI }}
          "
      - name: cleanup
        run: rm -rf ~/.ssh